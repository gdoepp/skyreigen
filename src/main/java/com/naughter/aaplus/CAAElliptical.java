/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.naughter.aaplus;

public class CAAElliptical {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected CAAElliptical(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CAAElliptical obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(CAAElliptical obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AAJNI.delete_CAAElliptical(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static double DistanceToLightTime(double Distance) {
    return AAJNI.CAAElliptical_DistanceToLightTime(Distance);
  }

  public static CAAEllipticalPlanetaryDetails Calculate(double JD, CAAElliptical.Object object, boolean bHighPrecision) {
    return new CAAEllipticalPlanetaryDetails(AAJNI.CAAElliptical_Calculate__SWIG_0(JD, object.swigValue(), bHighPrecision), true);
  }

  public static double SemiMajorAxisFromPerihelionDistance(double q, double e) {
    return AAJNI.CAAElliptical_SemiMajorAxisFromPerihelionDistance(q, e);
  }

  public static double MeanMotionFromSemiMajorAxis(double a) {
    return AAJNI.CAAElliptical_MeanMotionFromSemiMajorAxis(a);
  }

  public static CAAEllipticalObjectDetails Calculate(double JD, CAAEllipticalObjectElements elements, boolean bHighPrecision) {
    return new CAAEllipticalObjectDetails(AAJNI.CAAElliptical_Calculate__SWIG_1(JD, CAAEllipticalObjectElements.getCPtr(elements), elements, bHighPrecision), true);
  }

  public static double InstantaneousVelocity(double r, double a) {
    return AAJNI.CAAElliptical_InstantaneousVelocity(r, a);
  }

  public static double VelocityAtPerihelion(double e, double a) {
    return AAJNI.CAAElliptical_VelocityAtPerihelion(e, a);
  }

  public static double VelocityAtAphelion(double e, double a) {
    return AAJNI.CAAElliptical_VelocityAtAphelion(e, a);
  }

  public static double LengthOfEllipse(double e, double a) {
    return AAJNI.CAAElliptical_LengthOfEllipse(e, a);
  }

  public static double CometMagnitude(double g, double delta, double k, double r) {
    return AAJNI.CAAElliptical_CometMagnitude(g, delta, k, r);
  }

  public static double MinorPlanetMagnitude(double H, double delta, double G, double r, double PhaseAngle) {
    return AAJNI.CAAElliptical_MinorPlanetMagnitude(H, delta, G, r, PhaseAngle);
  }

  public CAAElliptical() {
    this(AAJNI.new_CAAElliptical(), true);
  }

  public final static class Object {
    public final static CAAElliptical.Object SUN = new CAAElliptical.Object("SUN");
    public final static CAAElliptical.Object MERCURY = new CAAElliptical.Object("MERCURY");
    public final static CAAElliptical.Object VENUS = new CAAElliptical.Object("VENUS");
    public final static CAAElliptical.Object MARS = new CAAElliptical.Object("MARS");
    public final static CAAElliptical.Object JUPITER = new CAAElliptical.Object("JUPITER");
    public final static CAAElliptical.Object SATURN = new CAAElliptical.Object("SATURN");
    public final static CAAElliptical.Object URANUS = new CAAElliptical.Object("URANUS");
    public final static CAAElliptical.Object NEPTUNE = new CAAElliptical.Object("NEPTUNE");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Object swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Object.class + " with value " + swigValue);
    }

    private Object(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Object(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Object(String swigName, Object swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Object[] swigValues = { SUN, MERCURY, VENUS, MARS, JUPITER, SATURN, URANUS, NEPTUNE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
